{
	"folder_history":
	[
		"/home/gassa/Paper/rtdroid-papers/asplos16",
		"/home/gassa/Paper/rtdroid-papers/tmc_journal",
		"/home/gassa/Paper/rtdroid-papers",
		"/home/gassa/my-code/workspace_blog",
		"/home/gassa/my-code/workspace_blog/octopress/_deploy"
	],
	"last_version": 3083,
	"last_window_id": 59,
	"log_indexing": false,
	"settings":
	{
		"new_window_height": 0.0,
		"new_window_settings":
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"fram",
						"frame=b"
					],
					[
						"impl",
						"implements"
					],
					[
						"ro",
						"rotate"
					],
					[
						"fi",
						"filename"
					],
					[
						"len",
						"len_data"
					],
					[
						"st",
						"str"
					],
					[
						"to",
						"total_sampling〔variable〕"
					],
					[
						"nu",
						"num"
					],
					[
						"num",
						"num〔variable〕"
					],
					[
						"ser",
						"serial_data"
					],
					[
						"p",
						"print"
					],
					[
						"Li",
						"Listener"
					],
					[
						"PL",
						"PLOT_DATA_SCATTER"
					],
					[
						"PLot_S",
						"PLOT_DATA_SUM_BY_NUM_NOISY"
					],
					[
						"Fal",
						"False〔variable〕"
					],
					[
						"load",
						"load_data〔variable〕"
					],
					[
						"wc",
						"wcet_data"
					],
					[
						"PLOT_DATA_",
						"PLOT_DATA_SCATTER"
					],
					[
						"line",
						"linespoints"
					],
					[
						"ch",
						"chmod〔function〕"
					],
					[
						"app",
						"append"
					],
					[
						"xra",
						"xrange_leon3"
					],
					[
						"yra",
						"yrange_leon3"
					],
					[
						"yran",
						"yrange_nexus〔variable〕"
					],
					[
						"dat",
						"data_list"
					],
					[
						"da",
						"data_list"
					],
					[
						"loa",
						"load_data"
					],
					[
						"PLOT",
						"PLOT_DATA_SCATTER"
					],
					[
						"is",
						"is_selected_plot"
					],
					[
						"le",
						"legend_list"
					],
					[
						"T",
						"True"
					],
					[
						"file",
						"filename"
					],
					[
						"pa",
						"path〔module〕"
					],
					[
						"tot",
						"total_sampling"
					],
					[
						"ne",
						"nexus"
					],
					[
						"nex",
						"nexus_s_yrange〔variable〕"
					],
					[
						"f",
						"filename"
					],
					[
						"exp_",
						"exp_leon3_noisy_serial"
					],
					[
						"ex",
						"exp_noisy_serial"
					],
					[
						"pl",
						"plot_serials"
					],
					[
						"exp",
						"exp_noisy_serial"
					],
					[
						"fil",
						"filelist"
					],
					[
						"file_",
						"file_splitter"
					],
					[
						"cd",
						"cdf_data"
					],
					[
						"sa",
						"save_data"
					],
					[
						"ti",
						"title"
					],
					[
						"out",
						"output_extension"
					],
					[
						"ter",
						"term"
					],
					[
						"PLOT_",
						"PLOT_SUM_BY_NUM_NOISY"
					],
					[
						"PLOT_SU",
						"PLOT_SUM_BY_NUM_NOISY〔variable〕"
					],
					[
						"PLOT_D",
						"PLOT_DATA_SUM_BY_NUM_NOISY"
					],
					[
						"PLO",
						"PLOT_CDF"
					],
					[
						"po",
						"point_color"
					],
					[
						"pi",
						"points"
					],
					[
						"F",
						"False"
					],
					[
						"g",
						"g('set"
					],
					[
						"set",
						"set_plot_points_data〔function〕"
					],
					[
						"ind",
						"index_str"
					],
					[
						"x",
						"x_idx"
					],
					[
						"dir",
						"directory"
					],
					[
						"sub",
						"subdir"
					],
					[
						"plot_",
						"plot_scatter"
					],
					[
						"glo",
						"glob〔module〕"
					],
					[
						"his",
						"hist_step"
					],
					[
						"cdf",
						"cdf_data"
					],
					[
						"t",
						"tuple"
					],
					[
						"gen_cdf",
						"gen_cdf_data_all〔function〕"
					],
					[
						"gen",
						"gen_cdf_data_by_type"
					],
					[
						"bin",
						"bin_width"
					],
					[
						"h",
						"histogram"
					],
					[
						"gen_",
						"gen_cdf_data〔function〕"
					],
					[
						"plot",
						"plot_data"
					],
					[
						"1000",
						"1000000"
					],
					[
						"in",
						"int〔class〕"
					],
					[
						"pro",
						"process_file"
					],
					[
						"pr",
						"print"
					],
					[
						"if",
						"ifmain	if __name__ == '__main__'"
					]
				]
			},
			"build_system_choices":
			[
				[
					[
						[
							"Packages/Makefile/Make.sublime-build",
							""
						],
						[
							"Packages/Makefile/Make.sublime-build",
							"Clean"
						],
						[
							"Packages/LaTeXing/LaTeX.sublime-build",
							""
						],
						[
							"Packages/LaTeXing/LaTeX.sublime-build",
							"Primary Quick Build"
						],
						[
							"Packages/LaTeXing/LaTeX.sublime-build",
							"Choose Quick Build"
						],
						[
							"Packages/LaTeXing/LaTeX.sublime-build",
							"Clean up Files"
						],
						[
							"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
							""
						]
					],
					[
						"Packages/Makefile/Make.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Python/Python.sublime-build",
							""
						],
						[
							"Packages/Python/Python.sublime-build",
							"Syntax Check"
						],
						[
							"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
							""
						]
					],
					[
						"Packages/Python/Python.sublime-build",
						""
					]
				]
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 111.0,
				"last_filter": "install",
				"selected_items":
				[
					[
						"install",
						"Package Control: Install Package"
					],
					[
						"",
						"Package Control: Install Package"
					],
					[
						"shell",
						"Set Syntax: Shell Script (Bash)"
					],
					[
						"pac",
						"Package Control: Remove Package"
					],
					[
						"Package Control: in",
						"Package Control: Install Package"
					],
					[
						"packge Contol: ",
						"Package Control: Install Package"
					],
					[
						"Package",
						"Package Control: Add Channel"
					],
					[
						"Package install",
						"Package Control: Install Package"
					]
				],
				"width": 467.0
			},
			"console":
			{
				"height": 222.0,
				"history":
				[
					"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
					"cmd: shell",
					"clear",
					"ls",
					"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
					"clear",
					"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
					"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/gassa/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
				"/home/gassa/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
				"/home/gassa/.config/sublime-text-3/Packages/SideBarEnhancements/Side Bar.sublime-settings",
				"/home/gassa/Paper/rtdroid-papers/asplos16/main.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/writeup/challenges.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/writeup/motivation.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/sections/extending-android-real-time.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/writeup/code-comparison.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/refs.bib",
				"/home/gassa/rtdroid/rtdroid-exp/WindTurbineMonitor/experiment/plotscript.py",
				"/home/gassa/Paper/rtdroid-papers/asplos16/sections/background-challenges.tex",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/response_letter.tex",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/response_letter.txt",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/sections/evaluation.tex",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/sections/introduction.tex",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/tmc_journal.tex",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/sections/sensor-architecture.tex",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-sensor/tmc-data-process.py",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-msg/tmc-data-process.py",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-jpapabench/tmc-data-process.py",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/old_results/plot_sensor.py",
				"/home/gassa/.config/sublime-text-3/Packages/User/SublimeREPL.sublime-settings",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/sections/related.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/listings-line-bkg.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/Makefile.include",
				"/home/gassa/Paper/rtdroid-papers/asplos16/write-up",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-alarm/tmc-data-process.py",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/old_results/plot_alarm.py",
				"/home/gassa/Paper/rtdroid-papers/asplos16/sections/evaluation.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/sections/impl.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/sections/conclusion.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/sections/background_challenges.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/sections/intro.tex",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-sensor/nexus-s/avg/exp-sensor-gc-intension.avg",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/old_results/plot_all.sh",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/old_results/tmc-data-process.py",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-sensor/nexus-s/avg/exp-sensor-computation-intension.avg",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-jpapabench/leon3/avg/jpapbench-listener.avg",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-jpapabench/leon3/avg/jpapbench-memory.avg",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/sections/motivation.tex",
				"/home/gassa/.config/sublime-text-3/Packages/User/Python2.sublime-build",
				"/home/gassa/Documents/plot_all_line_type.py",
				"/home/gassa/Documents/tmc-data-process.py",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-msg/tmc-new-results.tex",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-jpapabench/nexus-s/cdf_all.tex",
				"/home/gassa/rtdroid/rtdroid-legacy/tmc-results-alarm/tmc-data-process.py",
				"/home/gassa/rtdroid/rtdroid-legacy/tmc-results-jpapabench/tmc-data-process.py",
				"/home/gassa/Paper/rtdroid-papers/pldi/results/rtdroid-message-latency/plot_script.py",
				"/home/gassa/rtdroid/rtdroid-legacy/tmc-new-results.tex",
				"/home/gassa/rtdroid/rtdroid-legacy/tmc-results-jpapabench/easyplot/easyplot.py",
				"/home/gassa/rtdroid/rtdroid-legacy/tmc-results-jpapabench/easyplot/rtdroid-plot.py",
				"/home/gassa/Paper/rtdroid-papers/pldi/newplots/baseline_w_heap_noise.gpl",
				"/home/gassa/.config/sublime-text-3/Packages/User/Python3.sublime-build",
				"/home/gassa/.config/sublime-text-3/Packages/User/Python.sublime-build",
				"/home/gassa/rtdroid/rtdroid-legacy/tmc-results-jpapabench/rtdroid-plot.py",
				"/home/gassa/.config/sublime-text-3/Packages/SublimeREPL/config/Python/Main.sublime-menu",
				"/home/gassa/rtdroid/rtdroid-legacy/tmc-results-jpapabench/data-analysis.py",
				"/home/gassa/.config/sublime-text-3/Packages/SublimeREPL/SublimeREPL.sublime-settings",
				"/home/gassa/rtdroid/rtdroid-legacy/tmc-results-jpapabench/nexus_jpapabench.sh",
				"/home/gassa/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
				"/home/gassa/.config/sublime-text-3/Packages/Pylinter/Pylinter.sublime-settings",
				"/home/gassa/.config/sublime-text-3/Packages/User/Package Control.sublime-settings",
				"/home/gassa/Paper/rtdroid-papers/pldi/results/specjvm/plot_script.py",
				"/usr/local/lib/python2.7/dist-packages/numpy/lib/npyio.py",
				"/home/gassa/.config/sublime-text-3/Packages/Package Control/Package Control.sublime-settings",
				"/home/gassa/.config/sublime-text-3/Packages/User/Plain text.sublime-settings",
				"/home/gassa/.config/sublime-text-3/Packages/User/Distraction Free.sublime-settings"
			],
			"find":
			{
				"height": 33.0
			},
			"find_in_files":
			{
				"height": 82.0,
				"where_history":
				[
					"~/"
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"Total Me",
					"RawFloats",
					"floatrow",
					"fig:android-turbine-heapsize-1",
					"yan:jtres:2013",
					"cite{",
					"cite{}",
					"term_type",
					"baseline",
					"fig:android-turbine-heapsize-1",
					"eval",
					"java",
					"yin:mobisys:2014",
					"yin:",
					"yinyan",
					"},\n",
					"xmlStyle",
					"javaStyle",
					"style=javaStyle",
					"xmlStyle",
					"javaStyle",
					"frame=t",
					"code",
					"frame=b",
					"Ph",
					"\\st",
					"yinedits",
					"dominant",
					"fig:thread-pool-vs-AEH-leon3",
					"preemptive",
					"plot_avg_",
					"plot_avg",
					"plot_",
					"??",
					"textwidth",
					"fig:turbine-rtsj-base-task",
					"minipage",
					"style",
					"caption",
					"subfigure",
					"minipage",
					"multicols",
					"black",
					"number of ",
					"number",
					"low-priority thread",
					"the Fig",
					"affects",
					"---",
					"Nexus",
					"standard deviation",
					"fig:jpapbench-base-nexus",
					"the Nexus S",
					"Nexus",
					"It was ob",
					"it was ob",
					"Nexus",
					"the Nexus",
					"\\lst",
					"btLstInputEmph",
					"<",
					"btLstInputEmph",
					"linebgrdcmd",
					"btLstHL",
					"linebackgroundcolor",
					"\\color{gray}",
					"color",
					"Red",
					"xcolor",
					"linebackgroundheight",
					"btLstHL",
					"lstinline",
					"\\bh",
					"lst",
					"xcolor",
					"verbments",
					"tikzmark",
					"figure",
					"ltset",
					"center",
					"/tcb/center",
					"tcolorbox",
					"tbl:codemetrics",
					"provides a",
					"provides a ",
					"gen_scatter_data",
					"process_raw_data",
					"plot_data",
					"leon3",
					"repeat",
					"leon3_yrange",
					"subfig:jpapabench-leon3-comp-b",
					"subfig:jpapabench-leon3-memory-b",
					"subfig:jpapbench-nexus-memory-b",
					"to do",
					"yinedit",
					"yinedits",
					"plot_single_scatter",
					"plot_s",
					"leon3_yrange",
					"plot_",
					"exp_leon3_noisy_serial",
					"exp_noisy_type",
					"exp_nexus_noisy_serial",
					"offset",
					"en_cdf_data_all",
					"gen_cdf_data_by_type",
					"process_raw_data",
					"print",
					"serial_data",
					"230000",
					"print",
					"printt",
					"total_sampling",
					"gen_cdf_data_by_num_noisy",
					"hist_range",
					"gen_cdf_data",
					"print",
					"have",
					"real-",
					"low-",
					"low- ",
					"per-",
					"per- ",
					"real-",
					"domains",
					"real-",
					"real-time"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"incremental_find":
			{
				"height": 33.0
			},
			"input":
			{
				"height": 30.0
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 246.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "Packages/User/Python2.sublime-build",
			"replace":
			{
				"height": 62.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"show_minimap": true,
			"show_open_files": true,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 273.0,
			"status_bar_visible": true,
			"template_settings":
			{
			}
		},
		"new_window_width": 0.0
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"fram",
						"frame=b"
					],
					[
						"impl",
						"implements"
					],
					[
						"ro",
						"rotate"
					],
					[
						"fi",
						"filename"
					],
					[
						"len",
						"len_data"
					],
					[
						"st",
						"str"
					],
					[
						"to",
						"total_sampling〔variable〕"
					],
					[
						"nu",
						"num"
					],
					[
						"num",
						"num〔variable〕"
					],
					[
						"ser",
						"serial_data"
					],
					[
						"p",
						"print"
					],
					[
						"Li",
						"Listener"
					],
					[
						"PL",
						"PLOT_DATA_SCATTER"
					],
					[
						"PLot_S",
						"PLOT_DATA_SUM_BY_NUM_NOISY"
					],
					[
						"Fal",
						"False〔variable〕"
					],
					[
						"load",
						"load_data〔variable〕"
					],
					[
						"wc",
						"wcet_data"
					],
					[
						"PLOT_DATA_",
						"PLOT_DATA_SCATTER"
					],
					[
						"line",
						"linespoints"
					],
					[
						"ch",
						"chmod〔function〕"
					],
					[
						"app",
						"append"
					],
					[
						"xra",
						"xrange_leon3"
					],
					[
						"yra",
						"yrange_leon3"
					],
					[
						"yran",
						"yrange_nexus〔variable〕"
					],
					[
						"dat",
						"data_list"
					],
					[
						"da",
						"data_list"
					],
					[
						"loa",
						"load_data"
					],
					[
						"PLOT",
						"PLOT_DATA_SCATTER"
					],
					[
						"is",
						"is_selected_plot"
					],
					[
						"le",
						"legend_list"
					],
					[
						"T",
						"True"
					],
					[
						"file",
						"filename"
					],
					[
						"pa",
						"path〔module〕"
					],
					[
						"tot",
						"total_sampling"
					],
					[
						"ne",
						"nexus"
					],
					[
						"nex",
						"nexus_s_yrange〔variable〕"
					],
					[
						"f",
						"filename"
					],
					[
						"exp_",
						"exp_leon3_noisy_serial"
					],
					[
						"ex",
						"exp_noisy_serial"
					],
					[
						"pl",
						"plot_serials"
					],
					[
						"exp",
						"exp_noisy_serial"
					],
					[
						"fil",
						"filelist"
					],
					[
						"file_",
						"file_splitter"
					],
					[
						"cd",
						"cdf_data"
					],
					[
						"sa",
						"save_data"
					],
					[
						"ti",
						"title"
					],
					[
						"out",
						"output_extension"
					],
					[
						"ter",
						"term"
					],
					[
						"PLOT_",
						"PLOT_SUM_BY_NUM_NOISY"
					],
					[
						"PLOT_SU",
						"PLOT_SUM_BY_NUM_NOISY〔variable〕"
					],
					[
						"PLOT_D",
						"PLOT_DATA_SUM_BY_NUM_NOISY"
					],
					[
						"PLO",
						"PLOT_CDF"
					],
					[
						"po",
						"point_color"
					],
					[
						"pi",
						"points"
					],
					[
						"F",
						"False"
					],
					[
						"g",
						"g('set"
					],
					[
						"set",
						"set_plot_points_data〔function〕"
					],
					[
						"ind",
						"index_str"
					],
					[
						"x",
						"x_idx"
					],
					[
						"dir",
						"directory"
					],
					[
						"sub",
						"subdir"
					],
					[
						"plot_",
						"plot_scatter"
					],
					[
						"glo",
						"glob〔module〕"
					],
					[
						"his",
						"hist_step"
					],
					[
						"cdf",
						"cdf_data"
					],
					[
						"t",
						"tuple"
					],
					[
						"gen_cdf",
						"gen_cdf_data_all〔function〕"
					],
					[
						"gen",
						"gen_cdf_data_by_type"
					],
					[
						"bin",
						"bin_width"
					],
					[
						"h",
						"histogram"
					],
					[
						"gen_",
						"gen_cdf_data〔function〕"
					],
					[
						"plot",
						"plot_data"
					],
					[
						"1000",
						"1000000"
					],
					[
						"in",
						"int〔class〕"
					],
					[
						"pro",
						"process_file"
					],
					[
						"pr",
						"print"
					],
					[
						"if",
						"ifmain	if __name__ == '__main__'"
					]
				]
			},
			"buffers":
			[
				{
					"contents": "\\section{Motivation and Challenges}\n\\label{sec:motivation-challenge}\n\nThis section uses a turbine monitoring application as an example to demonstrate\nhow the application is implemented in RTSJ's threading model and Android's\nevent-driven model. We discuss the advantages and disadvantages of using both\nmodels through a side-by-side comparison, and propose a new programming model\nthat combines Android's model with RTSJ. The rest of section details the\ndifficulties of realizing such model based on the existing work of \\rtdroid.\n\n\n\\subsection{Turbine Application}\n\\label{sec:motivation-turbine-app}\n\nThe turbine application consists three periodic tasks---an audio controller, a\nprober, and a recorder---and one aperiodic task, a crack detector for turbine\nblade. The audio controller reset hardware and environment configuration for\nthe prober and the recorder every 30 minutes, and the prober and the recorder\nare released at the rate of 50 $ms$, respectively. After the recorder collects\na fixed number of audio samples, then it notifies the crack detector, and the\nprober and record enter into idle mode. The detector receives notification and\nanalyze the spectrum of the collected audio samples.\n\nFrom programming perspective, The design of turbine monitoring application need\nto considerate the requirements in three aspects:\n1) The real-time requirements, e.g., the presentation of the timeliness and the\n   importance of the tasks in applications.\n2) The functional requirements, for example, the implementation of the sound\n   wave probing, recording, and the crack detection algorithm.\n3) The non-functional requirements, including the control of the audio\n   hardware, the synchronization between tasks and etc.\n\n%%%%%%%%%%%%%RTSJ Turbine Application%%%%%%%%%%%%%%%%%\n\\begin{figure}\n\\centering\n\\lstset{style=myjava}%%%%%%%%%%%%%%%%%%%RTSJ: Base task%%%%%%%%%%%%%%%%%%%%\n\\begin{minipage}{\\linewidth}\n\\begin{lstlisting}[frame=b, caption={RTSJ - Base Task}, label=code:rtsj-base-task]\npublic abstract class BaseTask implements Runnable{\n  private RealtimeThread thread;\n  protected PeriodicThread(TaskConfig config, AbsoluteTime startTime) {\n    PeriodicParameters periodic = null;\n    if (config.period != null) {\n      periodic = new PeriodicParameters(startTime, config.period);\n    }\n    PriorityParameters p = new PriorityParameters( config.priority );\n    thread = new RealtimeThread(p, periodic, null, null, null, this);\n    thread.start();\n  }\n  abstract void run();\n}\n\\end{lstlisting}\n\\end{minipage}\n%%%%%%%%%%%%%%%%%%%RTSJ: Recorder Task%%%%%%%%%%%%%%\n\\begin{minipage}{\\linewidth}\n\\begin{lstlisting} [frame=b, caption={RTSJ - Recorder Task}, label=code:rtsj-recorder-task]\npublic class RecorderRTSJ extends BaseTask{\n  public Recorder(TaskConfig config, AbsoluteTime startTime){\n    super(config, startTime);\n  }\n  public void run() {\n    for (;;) {\n      currentThread.waitForNextPeriod();\n      SampleGate.instance().acquireWriter();\n      ....\n      SampleGate.instance().releaseWriter();\n    }\n  }\n}\n\\end{lstlisting}\n\\end{minipage}\n%%%%%%%%%%%%%%%%RTSJ: Smaple Gate%%%%%%%%%%%%%%%%%%%%\n\\begin{minipage}{\\linewidth}\n\\begin{lstlisting}[frame=b, caption={RTSJ - Shared Data Buffer}, label=code:rtsj-shared-buffer]\npublic class SampleGate {\n  private static SampleGate gate;\n  private SampleBuffer []buffers;\n  synchronized public SampleBuffer acquireReader() {\n    while (!fresh) {\n      try {\n        this.wait();\n      } catch (InterruptedException e) { }\n    }\n    return buffers[reader];\n  }\n  synchronized public void releaseReader() {\n    buffers[reader].clear();\n    reader = -1;\n  }\n}\n\\end{lstlisting}\n\\end{minipage}\n\\caption{Turbine Application in RTSJ}\n\\label{fig:turbine-rtsj}\n\\end{figure}\n%%%%%%%%%End of RTSJ Turbine Application%%%%%%%%%%%%%%\n\nThe original turbine application is developed with RTSJ's threading model.\nCode.~\\ref{code:rtsj-base-task}, Code.~\\ref{code:rtsj-recorder-task} and\nCode.~\\ref{code:rtsj-shared-buffer} demonstrate three classes of the simplified\npseudo codes  in RTSJ application. The \\texttt{BaseTask} is an abstract class\nthat configures and initiates a real-time thread for each task. Then, the\n\\texttt{RecorderRTSJ} extends \\texttt{BaseTask} with periodic behavior.\nCode.~\\ref{code:rtsj-recorder-task} from line 6 to line 11 illustrates how to\nuse RTSJ's APIs to implement a periodic logic. The\nCode.~\\ref{code:rtsj-shared-buffer} lists the \\texttt{SampleGate} that serves\nas a shared data structure betweens recorder and crack detector by using\n\\textit{synchronized} key word. Although the \\texttt{BaseTask} abstracts the\ncommon operations of thread creation, and separates the real-time requirement\nimplementation from the actual application logic, the shared buffer variable,\n\\texttt{SampleGate}, still couples the recorder and crack detector. While the\nlocks between them require extra care in order to avoid priority-inversion or\nother locking problems.\n\n%%%%%%%%%%%%%Android Turbine Application%%%%%%%%%\n\\begin{figure}[t!]\n\\centering\n\\lstset{style=myjava}\n%%%%%%%%%%%%%%%%%%Android: Base Task%%%%%%%%%%%%%%%%%%\n\\begin{minipage}{\\linewidth}\n\\begin{lstlisting} [frame=b, caption={Android - Base Task}, label=code:android-base-task,]\npublic abstract class PeriodicService extends Service implements Runnable{\n  public abstract void onRelease();\n\n  public int onStartCommand(Intent intent, int flags, int startId) {\n    period = Context.getConfig().getLong(\"PERIOD\");\n    delay = Context.getConfig().getLong(\"DELAY\");\n    future = scheduler.scheduleAtFixedRate( this, delay, period, TimeUnit.MILLISECONDS);\n    return super.onStartCommand(intent, flags, startId);\n  }\n  public void run(){\n    onRelease();\n  }\n}\n\\end{lstlisting}\n\\end{minipage}\n%%%%%%%%%%%%%%%%%%Android: ProberService%%%%%%%%%%%%%%%%%%\n\\begin{minipage}{\\linewidth}\n\\begin{lstlisting}[frame=b, caption={Android - RecorderService}, label=code:android-recoder-service,]\npublic class RecorderService extends PeriodicService {\n  public void onRelease() {\n  ...\n  LocalBroadcastManager lbm = LocalBroadcastManager. getInstance(this);\n  Intent startIntent = new Intent();\n  startIntent.setAction(\"edu.buffalo.wind. windturbinemonitor. CrackDetectorReceiver\");\n  startIntent.putExtra(\"data\", data);\n  lbm.sendBroadcast(startIntent);\n  }\n}\n\\end{lstlisting}\n\\end{minipage}\n%%%%%%%%%%%%%%%%%%Android: XML Configuration%%%%%%%%%%%%%%%%%%\n\\lstset{style=myxml}\n\\begin{minipage}{\\linewidth}\n%\\vspace{-\\baselineskip}\n\\begin{lstlisting}[\n  basicstyle={\\small\\FONTFAMILY\\color{black}},\n  backgroundcolor=\\color{white},\n  frame=b,\n  caption={Android - XML Manifest},\n  label=code:android-manifest,]\n<service android:name=\".RecorderService\">\n  <meta-data android:name=\"PERIOD\" android:value=\"50\" />\n  <meta-data android:name=\"DELAY\" android:value=\"25\" />\n</service>\n\n<receiver android:name=\".CrackDetectorReceiver\">\n  <intent-filter>\n    <action android:name=\"edu.buffalo.wind. windturbinemonitor. CrackDetectorReceiver\">\n    </action>\n  </intent-filter>\n</receiver>\n\\end{lstlisting}\n\\end{minipage}\n\\caption{Turbine Android in Android}\n\\label{fig:turbine-android}\n\\end{figure}\n%%%%%%%%%%%%%End of Android Turbine Application%%%%%%%%%%%%%%%%%\n\nAndroid's event-driven programming model provides pre-defined interfaces for\ncomponents to implement in applications, and decouples the dependencies by\nexplicitly declaring the components in a manifest XML file. To port the turbine\napplication in Android, we map the periodic tasks as Android's\n\\texttt{Services}, and the sporadic task as \\texttt{BoardcastReceiver}.\nCode.~\\ref{code:android-base-task}, Code.~\\ref{code:android-recoder-service},\nand Code.~\\ref{code:android-manifest} show the counterpart of the above listed\npseudo codes in Android application. To express the real-time requirement of\nthe application, \\texttt{PeriodicService} is used as a glue class that utilizes\n\\texttt{ScheduledExecutorService} to schedule \\texttt{Runnable}s periodically.\nThe initiation of task is implemented in \\texttt{Service}'s\n\\texttt{onStardCommand()} function invoked, when\n\\texttt{Service} is started. The \\texttt{RecorderService} provides application\nlogic in \\texttt{onRelease()} function, as\nCode.~\\ref{code:android-recoder-service} shows.\n\nTo enable the data sharing or communication, Android provide a set of APIs for\nmessage passing. Code~\\ref{code:android-recoder-service} from line 5 to line 9\nshow an example of using Android's \\texttt{LocalBroad\\-castManager} to send an\nmessaging object, \\texttt{Intent}, attaches with a specified string as\n\\texttt{action}. To receive this \\texttt{Intent},\n\\texttt{Crack\\-DetectorReceiver} needs to declare the \\textit{intent-filter}\nwith corresponding \\textit{action}, as shown in\nCode.~\\ref{code:android-manifest} in Android application manifest file. The\nmanifest file is an XML file that mandatory for application development, each\ncomponent (e.g., \\texttt{Activity}, \\texttt{Service}, and\n\\texttt{BoardcastReceiver}) is mandatory to be declared in a manifest XML file.\nIt provides two aspects of information: 1) How the components are loaded, 2)\nWhat system/application events that the component subscript. Additionally, the\nhardware related components in RTSJ's implementation is replaced with Android's\n\\texttt{AudioTrack} and \\texttt{AudioRecorder} APIs.\n\n% DO NOT REMOVE David A. Wheeler acknowledgment here; it can be moved,\n% but must appear in the paper! -- elb\n\\begin{table}[t]\n\\begin{tabular}{rrrrr}\n\\textbf{Model} & \\textbf{SLoC\\footnote{Source Lines of Code as counted\nby David~ A.\\ Wheeler's SLOCCount}} & \\textbf{sync\\footnote{Methods or\nblocks protected by synchronized statements}} &\n\\textbf{Manifest\\footnote{Lines of XML code}} &\n\\textbf{Vars\\footnote{Number of static configuration\nvariables}}\\\\\n\\hline\nRTSJ & 801 & 9 & 0 & 80 \\\\\nAndroid & 615 & 0 & 42 & 20 \\\\\n%\\rtdroid & 407 & 0 & 52 & 36 \\\\\nshared & 1387 & 3 & 0 & 0 \\\\\n\\end{tabular}\n\\caption{Selected Code Complexity Metrics}\n\\label{tbl:codemetrics}\n\\end{table}\n\n\nTo quantify the code complexity of two implementations,\nTable~\\ref{tbl:codemetrics} shows some software code metrics for the comparison\nbetween the RTSJ implementation and Android one. The comparison shows Android's\nAPIs can help to reduce code complexity compare to the implementation in RTSJ.\nThe reduction of complexity is attributed to two folds: 1) the declaration,\nrather than procedural specification of real-time properties in the manifest,\n2) lifting of certain synchronization concerns from the application to the\ninfrastructure by using Android's \\texttt{Intent}. Thus, the combination of\nAndroid's programming model and RTSJ APIs seems to be an good candidate for\nreal-time development. However, simply plugging RTSJ's library into Android\nframework will not produce such candidate, since Android's framework does\nnot concern about real-time guarantee as it is designed.\n\n\\begin{figure*}\n\\centering\n\\subfloat[Baseline Performance]{\n\\includegraphics[width=0.5\\linewidth]{new-results/baseline_17M}\n\\label{fig:android-turbine-baseline}\n}\n\\subfloat[Baseline Performance with Memory Stress]{\n\\includegraphics[width=0.5\\linewidth]{new-results/turbine_gc_noisy_17M}\n\\label{fig:android-turbine-memory-stress}\n}\n\\caption{Memory Predictability Performance - Android Turbine Application}\n\\label{fig:android-turbine-evaluation}\n\\end{figure*}\n\n\\subsection{Challenges}\n\\label{sec:challenge-real-time-android}\n\nPrevious attempts to make Android amenable to real-time include the work of\nMaia {\\em et al.}~\\cite{maia:ospert:2010} and Mauerer {\\em et\nal.}~\\cite{maia:ospert:2010}. They have proposed system architecture that\nleverage a real-time kernel and a real-time Java Virtual Machine to provide\nbetter priority awareness for task scheduling, and reduce memory collection\ndelays. However, both of their solutions require a strict separation between\nreal-time and none-real-time applications. Kalkov and Thomas {\\em et\nal.}~\\cite{kalkov:jtres:2012, thomas:jtres:2013} extended Dalvik Virtual\nMachine with a real-time extension, it allows the real-time and the\nnone-real-time applications to execute in the same environment, and provides\nextra APIs to trigger GC manually to reduce pause time in the real-time apps.\nThis approach is problematic as choosing when to run GC is difficult.\n\\rtdroid~\\cite{yan:jtres:2013, yan:mobisys:2014} chose a clean slate design\nthat built upon an existing real-time kernel and an off-the-shelf real-time\nJava Previous attempts to make Android amenable to real-time include the work\nof Maia {\\em et al.}~\\cite{maia:ospert:2010} and Mauerer {\\em et\nal.}~\\cite{maia:ospert:2010}. They have proposed system architecture that\nleverage a real-time kernal and a real-time Java virtual machine to provide\nbetter priority awareness for task scheduling, and reduce memory collection\ndelays. However, both of their solutions require a strict separation between\nreal-time and none-real-time applications. Kalkov and Thomas {\\em et\nal.}~\\cite{kalkov:jtres:2012, thomas:jtres:2013} extended Dalvik virtual\nmachine with a real-time extension, it allows the real-time and the\nnone-real-time applications to execute in the same environment, and provides\nextra APIs to trigger GC manually to reduce pause time in the real-time apps.\nThis approach is problematic as choosing when to run GC is difficult. \\rtdroid\n~\\cite{yan:jtres:2013, yan:mobisys:2014} chose a clean slate design that built\non an existing real-time kernel and an off-the-shelf real-time Java Virtual\nMachine. An subset of components in the framework layer were re-designed with\nreal-time features, because the authors have observed that the internals of\nAndroid lacks of priority-awareness. In parallel with \\rtdroid, Oh {\\em et\nal.}~\\cite{oh:jtres:2012} and Perneel {\\em et al.}~\\cite{perneel:ICCSII:2012}\nhave evaluated the different components in Android, and reported a similar\nresults. Mongia {\\em et al.}~\\cite{rajguru:IJMRA:2014} have also showed that\ndeadlines were frequently missed in Android with delays ranging from 1 $ms$ to\n500 $ms$.\n\nThe existing work of \\rtdroid in the framework layer includes its message\npassing components, \\texttt{RT-Looper} and \\texttt{RT-Handler}, which are\nessential to the event-driven nature, and a subset of \\textit{system services}\nthat based on the message passing components, \\texttt{RT-AlarmManager} and\n\\texttt{RT-SensorManager}. Similarly, Kalkov {\\em et\nal.}~\\cite{kalkov:jtres:2014} have explored how different components interact\nthrough the \\texttt{Intent} on Android, and re-designed it for predictability.\nThis design is in-line with\n\\rtdroid approach that re-designs the core constructs and mechanisms of\nAndroid. However, all of these re-designed components only concern the timing\naspect of the real-time requirement, but not memory predictability, limiting\nthe solution to the soft real-time apps. The memory management of \\rtdroid\nmainly relays on real-time garbage collection (RTGC).\n\nThe rest of the section explains a general problem of providing memory\npredictability in Android by using the turbine application as an example. Then,\nwe present a serial of difficulties that are specific to event-based system.\nDue to the simplicity of the communication requirement in turbine application,\nwe have ported jPapabench, a real-time benchmark application, as Android\napplication to show the challenges that stem from the event-driven nature of\nAndroid.\n\n\\subsubsection{Challenge in Object Criticality}\n\\label{sec:challenge-object-criticality}\n\\hspace*{\\fill} \\\\\nAndroid provides no mechanisms other than standard Java referential integrity\nguarantees and garbage collection (GC) to track object allocation and lifetime.\nAll objects initiated via \\java{new} operator are allocated in VM's heap, and\ncollected when the GC determines that they are no longer reachable. the\nexecution of garbage collection can interfere with the application execution by\npausing it while collection occurs. It also cannot guarantee object allocation\nand deallocation with predictable performance, and how much memory a real-time\ncomponent may consume at runtime.\n\n\nTo illustrate the impact of object criticality, we run turbine application in\nAndroid under two configuration on a Nexus S smartphone, and plot the intervals\nbetween two releases of the prober task and the recorded GC events during\nexperiments in Figure.~\\ref{fig:android-turbine-evaluation}.\nFigure.~\\ref{fig:android-turbine-baseline} serves as baseline performance that\nexecute turbine application with an noisy thread that runs every second, and\noccupies the CPU for 10 $ms$. It is not surprised that there are a number of\nreleases that miss their deadline, because the components in application are\nnot prioritized. To amplify the GC effect to perfectibility, we allow the noisy\nthread to allocate random-length array repeatedly during its 10 $ms$ execution,\nand present the results in Figure.~\\ref{fig:android-turbine-memory-stress}.\nFigure.~\\ref{fig:android-turbine-memory-stress} presents more GC events and the\nnumber of missing-deadline release are significantly more than the number in\nbaseline performance. It means the increasing number of missing-deadline\nreleases are caused by GC pauses. In fact, this kind of interference caused by\nGC is not limited to only instances of high memory stress; the Android kernel\ncan force an application to GC based on system wide heuristics by supplying the\nsignal SIGUSR1 to DVM as well as the latest version of ART.\n\nThe above experimental results show that Android automatic memory management\ncan not guarantee object allocation and deallocation with predictable\nperformance, since the unpredictable GC pause. Although RTGC can reduce these\nGC pauses, it is still problematic to tracking the criticality of the allocated\nobjects. Namely, it can not distinguish the objects that used for critical\ntasks or non-critical tasks. The automatic memory management also can not\nassign a specified minimum allocation space to particular critical tasks.\nClosely related to this is the capability of ``transitioning'' non-critical\nobjects to critical objects and vice-versa, which can be necessary when\ncommunicating between contexts of different critical levels.\n\n\\subsubsection{Challenge in Event-Based Model}\n\\label{sec:challenge-msg-passing}\n\\hspace*{\\fill} \\\\\nAs mentioned earlier, Android's event-drive model present a serial of\nchallenges that are specific to event-based system. Since turbine application\nonly requires simple notification and data transfer between different\ncomponents. We decide to use another application, jPapabench, to explain the\nchallenges related to Android's event-driven model:\n\\begin{enumerate}\n\\item Android provides no way to express the importance of or timeliness\nrequirements associated with a message being passed.\n\\item Android makes heavy use of callbacks, but code passed between execution\ncontexts has no means to express its timeliness requirements or the guarantees\nit provides.\n\\item Android provides no model for the interaction between time-critical\nfunctionality and non-time critical functionality.\n\\end{enumerate}\n\n\\begin{figure}\n\\centering\n\\includegraphics[width=\\columnwidth]{figures/jpapben-figures/task-dependencies-flow}\n\\caption{jPapaBench Task Dependency}\n\\label{fig:jpapabench-tasks}\n\\end{figure}\n\n\\noindent{\\textbf{jPapabench}} is designed as a Java real-time benchmark to\nevaluate real-time JVM. It mirrors the function of a open source UAV\napplication, paparazzi, and changes its the cyclic execution model into\nseparated real-time tasks in Java threads. The jPapaBench code is conceptually\ndivided into three major modules: the autopilot, which controls UAV flight and\nis capable of automatic flight in the absence of other control; the fly-by-wire\n(FBW), which handles radio commands from a controlling station and passes\ninformation to the autopilot to be integrated into flight control; and the\nsimulator, which collects information from each of the other modules,\ndetermines the UAV's location, trajectory, and generates input from the\nenvironment (such as GPS data, servo feedback, \\emph{etc.}). Two of these\nmodules, the autopilot and fly-by-wire (FBW), are housed in different\nmicro-controllers on the conceptual hardware, and the jPapaBench code simulates\na serial bus between them ---they have no other direct communication path. The\nsimulator is only loosely coupled to the FBW module, but shares a moderate\namount of state with the autopilot. A high-level overview of the jPapaBench\nsystem is provided in Fig.~\\ref{fig:jpapabench-tasks}. We select two scenarios\nin jPapabench application to illustrate the above challenges in the concrete\nexamples.\n\n\\begin{figure*}\n\\centering\n\\subfloat[Original jPapabench Application]{\n\\includegraphics[width=0.49\\linewidth]{figures/jpapben-figures/original-jpapabench-msg-flow}\n\\label{subfig:jpapabench-original}\n}\n%\\hspace{6mm}\n\\subfloat[Android jPapabench Application]{\n\\includegraphics[width=0.49\\linewidth]{figures/jpapben-figures/andriod-jpapabench-msg-flow}\n\\label{subfig:jpapabench-android}\n}\n\\caption{jPapaBench Data Flow}\n\\label{fig:jpapabench}\n\\end{figure*}\n\nTo present the lack notion of real-time properties in message passing, we\nchoose the \\texttt{ReportingTask} in autopilot module which simulates the\ntelemetry components in paparazzi~\\cite{misc:paparazzi:tel}. It is responsible\nto send messages over the downlink channel by an aircraft to the ground\nstation. The original jPapabench just provides an empty Runnable for it.\nAccording to the instruction of paparazzi, the messages send through the\ndownlink must be configured carefully, since the limit speed of bandwidth. A\nsophisticated mechanism have been developed in order to tailor the data\ndownlink behavior automatically or manually depends on the interests. The\nAndroid version of jPapabench implements the \\texttt{ReportingTask} to\nassociate with autopilot service, and autopilot service provides a\n\\texttt{Handler} instance that enables other services to send messages to\nautopilot. To simulated the finite bandwidth of downlink, the\n\\texttt{Handler} accumulate the received messages in a fix-length buffer, and\nthe \\texttt{ReportingTask}, then, runs periodically to print the limited number\nof messages into Android's system log. It is inevitable for autopilot service's\n\\texttt{Handler} to drop messages, if the message receiving rate exceeds the\nmessage printing rate. More over, there is no mechanism to distinguish between\nthe messages sent from critical tasks, such as the mode change messages and the\nlow- battery messages from safe checking tasks, or the less critical logging\nmessages from on-board devices. Although we limit the accumulated messages in\nautopilot service's buffer, the delay of the message queuing in\n\\texttt{Handler}'s framework can still be arbitrary, since the processing order\nof Android \\texttt{Handler} is FIFO, and there is no bound for the message\nqueue as well. The long message queue can exhaust memory and creating high\nmemory pressure can not only impact the delays via the GC. It is not,\ntherefore, possible to ensure the delivery of messages for critical tasks.\n\nTo present the lack of priority-awareness in the asynchronous callback\ninvocation, we choose a data flow path cross all three modules. The autopilot\nmodule compute the control parameters based on the current values of the\nsimulated infra-red (IR) sensor and GPS device. The autopilot control\nparameters are passed to the FWB module for validation checking, and delivered\nto the simulation module where the simulated flight model computes and updates\nsimulated IR sensor and GPS device. Figure.~\\ref{subfig:jpapabench-original}\nshows the data flow in original jPapabench, the data transfer between autopilot\nand FWB is enable by a simulated SPI bus which are implemented with a cyclic\nqueue. The rest of cooperation is done through sharing the states of simulated\ndevices. The correctness of original application is based the consumption that\nthere are enough CPU cycles for all of the tasks to meet their deadlines.\nFigure.~\\ref{subfig:jpapabench-android} presents how we port this data flow\npath in Android application. We replace the SPI bus with Android's\n\\texttt{Intent}, and implement the safe checking task,\n\\texttt{CheckMega128ValueTask} and the flight model simulation task,\n\\texttt{SimulatorFlightModelTask}, as Android's \\texttt{BoardcastReceivers}. It\ndecouples the dependency between autopilot and FWB module, and explicitly\nexpress the tasks execution order.\n\nHowever, There are a number of interesting questions that arise while\nprocessing intents and their associated callbacks. Firstly, Android cannot\nexpress preference for processing callbacks from different tasks, and handles\nintents. The execution of callback function is in a first-in-first-out manner.\nFor instance, Android can not express that the intent sent to\n\\texttt{CheckMega128ValueTask} should have a high priority to the intent to\n\\texttt{SimulatorFlightModelTask}. The second consideration is the execution of\nthe callback function should decouple from the messaging mechanism. Using the\nsame example, it means the delivery process of the intent from\n\\texttt{StabilizationTask} to \\texttt{CheckMega128ValueTask} should reflect the\nimportance of \\texttt{StabilizationTask}, but the execution of the\n\\texttt{onReceive()} function on \\texttt{CheckMega128ValueTask} should not\ninherit the importance of \\texttt{StabilizationTask}. Otherwise, it can\npotentially block the execution of simulation tasks. It can result in the\nautopilot computes its current position with outdated values.\n\nFinally, because Android does not have a model for real-time processing, it\nalso does not have a model for the interaction between contexts of differing\nimportance. For example, if there is a camera payload that steams video data to\nground station through the \\texttt{ReportTask}. This video steaming component\ncan be a less-critical or non-critical components, since the missing of a few\nframe of video may acceptable for off-line analysis or the missing steam can be\nreconstruct through recovery algorithm. \\yinedits{(I am sure it is ok to say\nso.)} Solutions to some of the foregoing points will address this issue (such\nas a message passing mechanism that is aware of the requirements of the\ncommunicating contexts, bounds on memory allocation and object tracking, etc.),\nbut a more comprehensive model that precisely defines the semantics of\ninteracting between contexts of differing criticality levels is required.\n\nIn this work, we purpose a real-time programming model based on the existing\nwork of \\rtdroid, our model combines Android's event-drive model with RTSJ. It\nextends Android's declarative manifest with real-time extension to provide the\nexpressiveness for real-time properties, and introduce priority awareness at\nsystem runtime for application execution. To avoid the traditional classing\nloading problems in real-time Java, RTDroid's programming model are designed as\ntwo phases execution, 1) class initial phase for components instantiation, and\n2) execution phase for actually logic execution. To provide memory safety, our\nprogramming model provides a mixed memory management mechanism in which\ngarbage collection is used for non-real-time or less critical tasks, and a\nregion-base memory management technique (scoped) is used for hard-real-time\ntasks. While this mix-mode memory management mechanism is hidden in the\nframework of RTDroid, it is transparent to application developers.\n\n\n\n\n\n\n\n\n",
					"file": "/home/gassa/Paper/rtdroid-papers/asplos16/writeup/motivation.tex",
					"file_size": 27959,
					"file_write_time": 130816376348594965,
					"settings":
					{
						"buffer_size": 27437,
						"line_ending": "Windows"
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
				[
					[
						[
							"Packages/Makefile/Make.sublime-build",
							""
						],
						[
							"Packages/Makefile/Make.sublime-build",
							"Clean"
						],
						[
							"Packages/LaTeXing/LaTeX.sublime-build",
							""
						],
						[
							"Packages/LaTeXing/LaTeX.sublime-build",
							"Primary Quick Build"
						],
						[
							"Packages/LaTeXing/LaTeX.sublime-build",
							"Choose Quick Build"
						],
						[
							"Packages/LaTeXing/LaTeX.sublime-build",
							"Clean up Files"
						],
						[
							"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
							""
						]
					],
					[
						"Packages/Makefile/Make.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/Python/Python.sublime-build",
							""
						],
						[
							"Packages/Python/Python.sublime-build",
							"Syntax Check"
						],
						[
							"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
							""
						]
					],
					[
						"Packages/Python/Python.sublime-build",
						""
					]
				]
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 111.0,
				"last_filter": "install",
				"selected_items":
				[
					[
						"install",
						"Package Control: Install Package"
					],
					[
						"",
						"Package Control: Install Package"
					],
					[
						"shell",
						"Set Syntax: Shell Script (Bash)"
					],
					[
						"pac",
						"Package Control: Remove Package"
					],
					[
						"Package Control: in",
						"Package Control: Install Package"
					],
					[
						"packge Contol: ",
						"Package Control: Install Package"
					],
					[
						"Package",
						"Package Control: Add Channel"
					],
					[
						"Package install",
						"Package Control: Install Package"
					]
				],
				"width": 467.0
			},
			"console":
			{
				"height": 222.0,
				"history":
				[
					"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
					"cmd: shell",
					"clear",
					"ls",
					"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
					"clear",
					"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
					"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/gassa/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
				"/home/gassa/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
				"/home/gassa/.config/sublime-text-3/Packages/SideBarEnhancements/Side Bar.sublime-settings",
				"/home/gassa/Paper/rtdroid-papers/asplos16/main.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/writeup/challenges.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/writeup/motivation.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/sections/extending-android-real-time.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/writeup/code-comparison.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/refs.bib",
				"/home/gassa/rtdroid/rtdroid-exp/WindTurbineMonitor/experiment/plotscript.py",
				"/home/gassa/Paper/rtdroid-papers/asplos16/sections/background-challenges.tex",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/response_letter.tex",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/response_letter.txt",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/sections/evaluation.tex",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/sections/introduction.tex",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/tmc_journal.tex",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/sections/sensor-architecture.tex",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-sensor/tmc-data-process.py",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-msg/tmc-data-process.py",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-jpapabench/tmc-data-process.py",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/old_results/plot_sensor.py",
				"/home/gassa/.config/sublime-text-3/Packages/User/SublimeREPL.sublime-settings",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/sections/related.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/listings-line-bkg.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/Makefile.include",
				"/home/gassa/Paper/rtdroid-papers/asplos16/write-up",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-alarm/tmc-data-process.py",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/old_results/plot_alarm.py",
				"/home/gassa/Paper/rtdroid-papers/asplos16/sections/evaluation.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/sections/impl.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/sections/conclusion.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/sections/background_challenges.tex",
				"/home/gassa/Paper/rtdroid-papers/asplos16/sections/intro.tex",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-sensor/nexus-s/avg/exp-sensor-gc-intension.avg",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/old_results/plot_all.sh",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/old_results/tmc-data-process.py",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-sensor/nexus-s/avg/exp-sensor-computation-intension.avg",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-jpapabench/leon3/avg/jpapbench-listener.avg",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-jpapabench/leon3/avg/jpapbench-memory.avg",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/sections/motivation.tex",
				"/home/gassa/.config/sublime-text-3/Packages/User/Python2.sublime-build",
				"/home/gassa/Documents/plot_all_line_type.py",
				"/home/gassa/Documents/tmc-data-process.py",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-msg/tmc-new-results.tex",
				"/home/gassa/Paper/rtdroid-papers/tmc_journal/new-results/tmc-results-jpapabench/nexus-s/cdf_all.tex",
				"/home/gassa/rtdroid/rtdroid-legacy/tmc-results-alarm/tmc-data-process.py",
				"/home/gassa/rtdroid/rtdroid-legacy/tmc-results-jpapabench/tmc-data-process.py",
				"/home/gassa/Paper/rtdroid-papers/pldi/results/rtdroid-message-latency/plot_script.py",
				"/home/gassa/rtdroid/rtdroid-legacy/tmc-new-results.tex",
				"/home/gassa/rtdroid/rtdroid-legacy/tmc-results-jpapabench/easyplot/easyplot.py",
				"/home/gassa/rtdroid/rtdroid-legacy/tmc-results-jpapabench/easyplot/rtdroid-plot.py",
				"/home/gassa/Paper/rtdroid-papers/pldi/newplots/baseline_w_heap_noise.gpl",
				"/home/gassa/.config/sublime-text-3/Packages/User/Python3.sublime-build",
				"/home/gassa/.config/sublime-text-3/Packages/User/Python.sublime-build",
				"/home/gassa/rtdroid/rtdroid-legacy/tmc-results-jpapabench/rtdroid-plot.py",
				"/home/gassa/.config/sublime-text-3/Packages/SublimeREPL/config/Python/Main.sublime-menu",
				"/home/gassa/rtdroid/rtdroid-legacy/tmc-results-jpapabench/data-analysis.py",
				"/home/gassa/.config/sublime-text-3/Packages/SublimeREPL/SublimeREPL.sublime-settings",
				"/home/gassa/rtdroid/rtdroid-legacy/tmc-results-jpapabench/nexus_jpapabench.sh",
				"/home/gassa/.config/sublime-text-3/Packages/User/Default (Linux).sublime-keymap",
				"/home/gassa/.config/sublime-text-3/Packages/Pylinter/Pylinter.sublime-settings",
				"/home/gassa/.config/sublime-text-3/Packages/User/Package Control.sublime-settings",
				"/home/gassa/Paper/rtdroid-papers/pldi/results/specjvm/plot_script.py",
				"/usr/local/lib/python2.7/dist-packages/numpy/lib/npyio.py",
				"/home/gassa/.config/sublime-text-3/Packages/Package Control/Package Control.sublime-settings",
				"/home/gassa/.config/sublime-text-3/Packages/User/Plain text.sublime-settings",
				"/home/gassa/.config/sublime-text-3/Packages/User/Distraction Free.sublime-settings"
			],
			"find":
			{
				"height": 33.0
			},
			"find_in_files":
			{
				"height": 82.0,
				"where_history":
				[
					"~/"
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"Total Me",
					"RawFloats",
					"floatrow",
					"fig:android-turbine-heapsize-1",
					"yan:jtres:2013",
					"cite{",
					"cite{}",
					"term_type",
					"baseline",
					"fig:android-turbine-heapsize-1",
					"eval",
					"java",
					"yin:mobisys:2014",
					"yin:",
					"yinyan",
					"},\n",
					"xmlStyle",
					"javaStyle",
					"style=javaStyle",
					"xmlStyle",
					"javaStyle",
					"frame=t",
					"code",
					"frame=b",
					"Ph",
					"\\st",
					"yinedits",
					"dominant",
					"fig:thread-pool-vs-AEH-leon3",
					"preemptive",
					"plot_avg_",
					"plot_avg",
					"plot_",
					"??",
					"textwidth",
					"fig:turbine-rtsj-base-task",
					"minipage",
					"style",
					"caption",
					"subfigure",
					"minipage",
					"multicols",
					"black",
					"number of ",
					"number",
					"low-priority thread",
					"the Fig",
					"affects",
					"---",
					"Nexus",
					"standard deviation",
					"fig:jpapbench-base-nexus",
					"the Nexus S",
					"Nexus",
					"It was ob",
					"it was ob",
					"Nexus",
					"the Nexus",
					"\\lst",
					"btLstInputEmph",
					"<",
					"btLstInputEmph",
					"linebgrdcmd",
					"btLstHL",
					"linebackgroundcolor",
					"\\color{gray}",
					"color",
					"Red",
					"xcolor",
					"linebackgroundheight",
					"btLstHL",
					"lstinline",
					"\\bh",
					"lst",
					"xcolor",
					"verbments",
					"tikzmark",
					"figure",
					"ltset",
					"center",
					"/tcb/center",
					"tcolorbox",
					"tbl:codemetrics",
					"provides a",
					"provides a ",
					"gen_scatter_data",
					"process_raw_data",
					"plot_data",
					"leon3",
					"repeat",
					"leon3_yrange",
					"subfig:jpapabench-leon3-comp-b",
					"subfig:jpapabench-leon3-memory-b",
					"subfig:jpapbench-nexus-memory-b",
					"to do",
					"yinedit",
					"yinedits",
					"plot_single_scatter",
					"plot_s",
					"leon3_yrange",
					"plot_",
					"exp_leon3_noisy_serial",
					"exp_noisy_type",
					"exp_nexus_noisy_serial",
					"offset",
					"en_cdf_data_all",
					"gen_cdf_data_by_type",
					"process_raw_data",
					"print",
					"serial_data",
					"230000",
					"print",
					"printt",
					"total_sampling",
					"gen_cdf_data_by_num_noisy",
					"hist_range",
					"gen_cdf_data",
					"print",
					"have",
					"real-",
					"low-",
					"low- ",
					"per-",
					"per- ",
					"real-",
					"domains",
					"real-",
					"real-time"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"groups":
			[
				{
					"selected": 0,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/home/gassa/Paper/rtdroid-papers/asplos16/writeup/motivation.tex",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 27437,
								"regions":
								{
								},
								"selection":
								[
									[
										13967,
										13967
									]
								],
								"settings":
								{
									"syntax": "Packages/LaTeXing/support/LaTeX.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 10431.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 33.0
			},
			"input":
			{
				"height": 30.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 246.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "Packages/User/Python2.sublime-build",
			"position": "0,1,0,0,0,1920,228,2560,708,3840,1080",
			"project": "",
			"replace":
			{
				"height": 62.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"selected_group": 0,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": true,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 273.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 59,
			"workspace_name": ""
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
		]
	}
}
